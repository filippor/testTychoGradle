package it.filippor.tycho.library

import it.filippor.tycho.GradleTycho
import it.filippor.tycho.EquinoxEmbedderDesc
import org.gradle.api.Project
import org.gradle.kotlin.dsl.*
import org.gradle.jvm.tasks.Jar
import java.util.Properties
import java.io.FileInputStream
import org.apache.tools.ant.filters.ReplaceTokens


fun Project.getEnbedderDesc() = rootProject.allprojects.first { it.plugins.hasPlugin(GradleTycho::class.java)}.extensions.getByType(EquinoxEmbedderDesc::class.java)
	
object PluginUtils {
	/**
	 * Copies the content of the plugin project's MANIFEST.MF file to the plugin artifact generated by the <i>jar</i> task of this project.
	 * While copying the MANIFEST.MF file, the value of the <i>Bundle-Version</i> attribute is replaced with the build version of the project.
	 *
	 * @param project the plugin project whose MANIFEST.MF file of the artifact of the jar task to update
	 */
	fun updatePluginManifest(project: Project) {
		project.tasks {
			"jar"(Jar::class) {
				manifest {
					manifest.attributes(mapOf("Bundle-Version" to project.version))

					from("META-INF/MANIFEST.MF") {
						manifest.attributes["Bundle-Version"] = project.version
					}
				}
			}
		}
	}
	
	/**
     * Configures the plugin artifact generated by the <i>jar</i> task of this plugin project to have the same content as declared in the
     * plugin project's build.properties file.
     *
     * @param project the plugin project whose content of the artifact of the jar task to configure
     */
    fun configurePluginJarInput( project:Project) {
        val buildProperties = readBuildPropertiesFile(project)
        var resources = splitBinIncludes(buildProperties.getProperty("bin.includes"))
        addPluginJarInput(resources, project)
    }
    
	 /**
     * Configures the feature artifact generated by the <i>jar</i> task of this feature project to have the same content as declared in the
     * plugin project's build.properties file. While configuring the <i>jar</i> task, the version placeholder in the <i>feature.xml<i/> file
     * is replaced with the build version of the project.
     *
     * @param project the plugin project whose content of the artifact of the jar task to configure
     */
    fun configureFeatureJarInput( project:Project) {
        val buildProperties = readBuildPropertiesFile(project)
        var resources = splitBinIncludes(buildProperties.getProperty("bin.includes"))
        addFeatureJarInput(resources, project)
    }
	
	fun readBuildPropertiesFile( project:Project):Properties  {
        val buildProperties =  Properties()
        val fis = FileInputStream(project.file("build.properties"))
        buildProperties.load(fis)
        fis.close()
        return buildProperties
    }
 private fun  splitBinIncludes( binIncludes:String):Set<String> {
        var result = mutableSetOf<String>()
        val virtualResources = setOf(".")
        binIncludes.split(',').forEach{ relPathI ->
            var relPath = relPathI.trim()
            if(!relPath.isEmpty() && !(relPath in virtualResources)) {
                result.add(relPath)
            }
        }
        return result
    }
	
	private fun addPluginJarInput( locations:Set<String>, project:Project ) {
        for ( location in locations) {
            val resource = project.file(location)
            if (resource.isDirectory()) {
                project.tasks{"jar"(Jar::class) {
                    from(location, { into(location) })
                }}
            } else {
                 project.tasks{"jar"(Jar::class) {
                    from (location)
                }}
            }
        }
    }
	private fun addFeatureJarInput(locations:Set<String> , project:Project ) {
        for (location in locations) {
            val resource = project.file(location)
            if (resource.isDirectory()) {
                project.tasks{"jar"(Jar::class) {
                    from(location, { into(location) })
                }}
            } else {
                project.tasks{"jar"(Jar::class) {
                    from(location)
                    
					if (resource.name == "feature.xml") {
						filter<ReplaceTokens>(hashMapOf("tokens" to hashMapOf("1.0.0.qualifier" to "\"" + project.version + "\""),"beginToken" to "\"","endToken" to "\""))
						filter<ReplaceTokens>(hashMapOf("tokens" to hashMapOf("0.0.0" to "\"" + project.version + "\""),"beginToken" to "\"","endToken" to "\""))
					}
                }}
            }
        }
    }
}

object Constants{
	val gradleTaskGroupName = "Eclipse Plugin Build"
}